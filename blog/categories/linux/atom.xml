<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Mostly Unixish]]></title>
  <link href="http://mostlyunixish.franzoni.eu/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://mostlyunixish.franzoni.eu/"/>
  <updated>2014-12-16T18:56:59+01:00</updated>
  <id>http://mostlyunixish.franzoni.eu/</id>
  <author>
    <name><![CDATA[Alan Franzoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kill Me Softly: killing a process the right way]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/12/16/kill-me-softly/"/>
    <updated>2014-12-16T20:10:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/12/16/kill-me-softly</id>
    <content type="html"><![CDATA[<p>I was tired of repeating the same old pattern. Send a kill signal. Check with pgrep. Did the process exit? Send a kill -9.</p>

<p>Now all my knowledge has been permanently dumped here:</p>

<p><a href="https://github.com/alanfranz/killmesoftly">Kill Me Softly on GitHub</a></p>

<p>If you want to kill a process by letting it to exit gracefully, and yet kill it without mercy if it&rsquo;s too slow to exit, that&rsquo;s your new favourite shell script.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unfreezing your desktop: when Compiz goes wrong]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/12/12/unfreeze-window-manager/"/>
    <updated>2014-12-12T08:50:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/12/12/unfreeze-window-manager</id>
    <content type="html"><![CDATA[<p>A desktop freeze is something that&rsquo;s not so rare nowadays &ndash; that&rsquo;s not good, but we shouldn&rsquo;t get desperate about that.</p>

<p>I like <a href="www.compiz.org">Compiz</a> with <a href="https://unity.ubuntu.com/">Unity Desktop</a> on my <a href="https://wiki.ubuntu.com/TrustyTahr/ReleaseNotes">Ubuntu Trusty</a> very much; <strong>I feel it&rsquo;s a step forward compared to traditional desktops</strong>. The only major nuisance I had on the previous versions was the inability to disable the global menu (which I like by itself, but I don&rsquo;t like the global menu disappearing when the mouse is not over it), but you can now disable it and have the menu on the window &ndash; even though you can&rsquo;t still enable an always-visible behaviour.</p>

<p>The problem is: compiz sometimes gets buggy. Running a different window manager, like <a href="https://help.ubuntu.com/community/Metacity">metacity</a> and/or <a href="http://cgit.freedesktop.org/xorg/app/xcompmgr/">xcompmgr</a> just doesn&rsquo;t seem good, you can experience other issues and you&rsquo;re using the stack in a way it wasn&rsquo;t designed for. I don&rsquo;t like that approach.</p>

<p>So, what can you do when your desktop freezes? The symptoms are usually very clear: you can move your mouse, but you can&rsquo;t click nor type anything.</p>

<p><strong>You don&rsquo;t need to reboot nor to restart X.</strong> You can fix this without losing your work.</p>

<h2>Get a raw tty</h2>

<p>Press <em>Ctrl+Alt+F1</em> and get to a raw linux console, and login with your credentials. Make sure you use the same user you&rsquo;re logged into X with.</p>

<h2>Find and kill your stuck process</h2>

<p><code>
pgrep compiz
</code></p>

<p>This will print the PID of our stuck window manager.</p>

<p>Let&rsquo;s kill it</p>

<p><code>
pkill compiz
</code></p>

<p>This <strong>won&rsquo;t usually be enough</strong> because the process is really stuck: if you repeat the <em>pgrep</em> command above, you&rsquo;ll find it still running &ndash; i.e. pgrep will return the very same PID as above.</p>

<p>So let&rsquo;s kill it, really this time!</p>

<p><code>
pkill -9 compiz
</code></p>

<p>Then wait some 15-20 seconds.</p>

<p>Now, if you repeat the <em>pgrep</em> , you&rsquo;ll either see a) no result or b) a different PID.</p>

<p>If you see a different PID, it&rsquo;s Ubuntu that noticed the crashed process and relaunched it; press <em>Ctrl+Alt+F7</em>, and you should just get back a working desktop!</p>

<h2>Relaunching</h2>

<p>If you see nothing with pgrep, you&rsquo;ll need to relaunch Compiz manually.</p>

<p>You cannot simply relaunch compiz on the console, because it must connect to X: the proper way to do it is:</p>

<p><code>
DISPLAY=:0 compiz
</code></p>

<p>Now switch back to your X instance with <em>Ctrl+Alt+F7</em> and enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't give a shell to system users - use su]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/12/11/su-with-chosen-shell/"/>
    <updated>2014-12-11T13:17:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/12/11/su-with-chosen-shell</id>
    <content type="html"><![CDATA[<p>I seem very ancientwisdom-oriented these days.</p>

<p>Sometimes you&rsquo;ve got a system user on your linux server that&rsquo;s used to run a specific service; it&rsquo;s a good practice to employ those users to achieve <a href="http://en.wikipedia.org/wiki/Privilege_separation">privilege separation</a>, since it limits the impact of many security breaches. It&rsquo;s security 101, really.</p>

<p>If you&rsquo;ve got a system user, most probably its shell would be <code>/bin/false</code> or <code>/bin/nologin</code>. Again, this is a good practice, since it would be harder for an attacker to gain shell access to your machine through that user.</p>

<p>But I find that many people just <strong>change</strong> such shell, because sometimes they need to customize the environment for a user, and if you try doing something like</p>

<p><code>
su - systemuser
</code></p>

<p>you&rsquo;ll find yourself just back to your original shell, because <strong>su</strong> tries to invoke the shell which is set for the target user, and <code>sudo</code> doesn&rsquo;t generally help here, because its <code>--shell</code> option doesn&rsquo;t start a proper login shell for that user (most of the environment is that of the calling user).</p>

<p>Very well, gentlemen: <strong>this is a wrongdoing and a potential security hole</strong>. You should <strong>never</strong> enable a shell for your system users. Instead, you should leverage an option of <strong>su</strong>:</p>

<p><code>
su - systemuser --shell /bin/bash
</code></p>

<p>That lets you choose your favourite shell on a per-launch basis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Hostnames configuration and shortcuts]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/12/10/ssh-hostname-shortcuts/"/>
    <updated>2014-12-10T13:20:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/12/10/ssh-hostname-shortcuts</id>
    <content type="html"><![CDATA[<p>This is another old trick, but I like to tell the world about such amenities.</p>

<p>I often find people writing command lines such as:</p>

<p><code>
ssh arcane-system-user@someextremelylong.andimpossibiletotype.anderrorprone.hostname.com
</code></p>

<p>or, worse</p>

<p><code>
ssh idliketorememberwhichuser@10.20.30.40
</code></p>

<p>or maybe it was</p>

<p><code>
ssh someuserimashamedof@1.2.3.4
</code></p>

<p>yes, sometimes ssh is simply tedious.</p>

<p>But you can do better. In fact, you can do <strong>much</strong> better.</p>

<p>your <em>~/.ssh/config</em> or <em>/etc/ssh/ssh_config</em> can contain <strong>Host</strong> configuration sections; I have already blogged about such directives when I told the world about stopping <a href="blog/2012/08/26/ssh-client-stop-complaining-inside-my-network/">key verification compliants</a> &ndash; they&rsquo;re very flexible, indeed.</p>

<p>Consider adding <strong>Host</strong> directives in your configuration for your most used services:</p>

<p>```
Host myniceserver</p>

<pre><code>Hostname myniceserver.mylove.com
Port 12345
User teddybear
</code></pre>

<p>```</p>

<p>And then you can just</p>

<p><code>
ssh myniceserver
</code></p>

<p>You can override most options on a per-server basis and/or select a certain private key for connections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I wish sudo would ask for my password less often]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/11/11/how-often-sudo-asks-for-your-password/"/>
    <updated>2014-11-11T13:28:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/11/11/how-often-sudo-asks-for-your-password</id>
    <content type="html"><![CDATA[<p>This is a <strong>very</strong> old trick, but I find many people doesn&rsquo;t know about it yet.</p>

<p>If you&rsquo;re using sudo <a href="https://help.ubuntu.com/community/RootSudo">(and you definitely should)</a>, one minor complaint is that you need to re-enter your password quite often.</p>

<p>One common pseudo-solution is to completely disable the password for executing sudo with such user; while it may be a good idea sometimes, it does decrease the overall security &ndash; if you happen to forget an open shell or screen/tmux lingering somewhere, you give total power to whoever gets in touch with it.</p>

<p>If you happen to let people into your sudo-enabled account with your ssh key, anybody that can get hold of your ssh key will get <strong>root access</strong> to your servers. It&rsquo;s not the best possible scenario.</p>

<p>There&rsquo;s a very simply workaround: just edit your sudoers file!</p>

<p><code>
sudo visudo
</code></p>

<p>and add a line like that (or modify it if it&rsquo;s already there)</p>

<p><code>
Defaults    timestamp_timeout=120
</code></p>

<p>This means that sudo will ask for a password every two hours instead of the default (15 minutes on most installations). You can use -1 in order to never let it expire (I don&rsquo;t suggest that &ndash; 8-10 hours should be enough for everybody.)</p>

<p>The only drawback is that such timeout is per shell, not system-wide &ndash; i.e. if you open multiple terminals, you&rsquo;ll have to enter the password again for each new terminal instance.</p>
]]></content>
  </entry>
  
</feed>
