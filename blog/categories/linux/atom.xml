<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Mostly Unixish]]></title>
  <link href="http://mostlyunixish.franzoni.eu/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://mostlyunixish.franzoni.eu/"/>
  <updated>2014-12-11T12:40:08+01:00</updated>
  <id>http://mostlyunixish.franzoni.eu/</id>
  <author>
    <name><![CDATA[Alan Franzoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't give a shell to system users - use su]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/12/11/su-with-chosen-shell/"/>
    <updated>2014-12-11T13:17:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/12/11/su-with-chosen-shell</id>
    <content type="html"><![CDATA[<p>I seem very ancientwisdom-oriented these days.</p>

<p>Sometimes you&rsquo;ve got a system user on your linux server that&rsquo;s used to run a specific service; it&rsquo;s a good practice to employ those users to achieve <a href="http://en.wikipedia.org/wiki/Privilege_separation">privilege separation</a>, since it limits the impact of many security breaches. It&rsquo;s security 101, really.</p>

<p>If you&rsquo;ve got a system user, most probably its shell would be <code>/bin/false</code> or <code>/bin/nologin</code>. Again, this is a good practice, since it would be harder for an attacker to gain shell access to your machine through that user.</p>

<p>But I find that many people just <strong>change</strong> such shell, because sometimes they need to customize the environment for a user, and if you try doing something like</p>

<p><code>
su - systemuser
</code></p>

<p>you&rsquo;ll find yourself just back to your original shell, because <strong>su</strong> tries to invoke the shell which is set for the target user, and <code>sudo</code> doesn&rsquo;t generally help here, because its <code>--shell</code> option doesn&rsquo;t start a proper login shell for that user (most of the environment is that of the calling user).</p>

<p>Very well, gentlemen: <strong>this is a wrongdoing and a potential security hole</strong>. You should <strong>never</strong> enable a shell for your system users. Instead, you should leverage an option of <strong>su</strong>:</p>

<p><code>
su - systemuser --shell /bin/bash
</code></p>

<p>That lets you choose your favourite shell on a per-launch basis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Hostnames configuration and shortcuts]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/12/10/ssh-hostname-shortcuts/"/>
    <updated>2014-12-10T13:20:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/12/10/ssh-hostname-shortcuts</id>
    <content type="html"><![CDATA[<p>This is another old trick, but I like to tell the world about such amenities.</p>

<p>I often find people writing command lines such as:</p>

<p><code>
ssh arcane-system-user@someextremelylong.andimpossibiletotype.anderrorprone.hostname.com
</code></p>

<p>or, worse</p>

<p><code>
ssh idliketorememberwhichuser@10.20.30.40
</code></p>

<p>or maybe it was</p>

<p><code>
ssh someuserimashamedof@1.2.3.4
</code></p>

<p>yes, sometimes ssh is simply tedious.</p>

<p>But you can do better. In fact, you can do <strong>much</strong> better.</p>

<p>your <em>~/.ssh/config</em> or <em>/etc/ssh/ssh_config</em> can contain <strong>Host</strong> configuration sections; I have already blogged about such directives when I told the world about stopping <a href="blog/2012/08/26/ssh-client-stop-complaining-inside-my-network/">key verification compliants</a> &ndash; they&rsquo;re very flexible, indeed.</p>

<p>Consider adding <strong>Host</strong> directives in your configuration for your most used services:</p>

<p>```
Host myniceserver</p>

<pre><code>Hostname myniceserver.mylove.com
Port 12345
User teddybear
</code></pre>

<p>```</p>

<p>And then you can just</p>

<p><code>
ssh myniceserver
</code></p>

<p>You can override most options on a per-server basis and/or select a certain private key for connections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I wish sudo would ask for my password less often]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/11/11/how-often-sudo-asks-for-your-password/"/>
    <updated>2014-11-11T13:28:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/11/11/how-often-sudo-asks-for-your-password</id>
    <content type="html"><![CDATA[<p>This is a <strong>very</strong> old trick, but I find many people doesn&rsquo;t know about it yet.</p>

<p>If you&rsquo;re using sudo <a href="https://help.ubuntu.com/community/RootSudo">(and you definitely should)</a>, one minor complaint is that you need to re-enter your password quite often.</p>

<p>One common pseudo-solution is to completely disable the password for executing sudo with such user; while it may be a good idea sometimes, it does decrease the overall security &ndash; if you happen to forget an open shell or screen/tmux lingering somewhere, you give total power to whoever gets in touch with it.</p>

<p>If you happen to let people into your sudo-enabled account with your ssh key, anybody that can get hold of your ssh key will get <strong>root access</strong> to your servers. It&rsquo;s not the best possible scenario.</p>

<p>There&rsquo;s a very simply workaround: just edit your sudoers file!</p>

<p><code>
sudo visudo
</code></p>

<p>and add a line like that (or modify it if it&rsquo;s already there)</p>

<p><code>
Defaults    timestamp_timeout=120
</code></p>

<p>This means that sudo will ask for a password every two hours instead of the default (15 minutes on most installations). You can use -1 in order to never let it expire (I don&rsquo;t suggest that &ndash; 8-10 hours should be enough for everybody.)</p>

<p>The only drawback is that such timeout is per shell, not system-wide &ndash; i.e. if you open multiple terminals, you&rsquo;ll have to enter the password again for each new terminal instance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu: faster release upgrade]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/09/25/ubuntu-faster-release-upgrade/"/>
    <updated>2014-09-25T13:34:00+02:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/09/25/ubuntu-faster-release-upgrade</id>
    <content type="html"><![CDATA[<p>It might be high time to update to the latest <a href="https://wiki.ubuntu.com/TrustyTahr/ReleaseNotes">Ubuntu 14.04</a>.</p>

<p>I think that the upgrade process that is provided by Canonical is slightly underoptimal: if you&rsquo;re using a
local mirror which can provide a very fast download of all packages, they&rsquo;ll usually be disabled during the
upgrade process, and an official mirror (possibile one very far away) will be employed.</p>

<p>This can lead to a very slow and painful upgrade process.</p>

<p>The solution is easy.</p>

<p>The following instructions regard moving from 12.04 (precise) to 14.04 (trusty)</p>

<h2>Switch your sources</h2>

<p>Assuming that your official ubuntu sources are configured from <code>/etc/apt/sources.list</code> just do something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo sed -i.old -e &rsquo;s/precise/trusty/g' /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I&rsquo;m not considering other sources in <code>/etc/apt/sources.list.d</code>, since they&rsquo;ll be disabled whatsoever; but if you happen
to have ubuntu sources there as well, you should repeat the SEDding process for each file.</p>

<h2>Update your index</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Download updated packages without installing</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get dist-upgrade &mdash;download-only</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Revert to old sources</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv -f /etc/apt/sources.list.old /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Update index again</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Rejoice!</h2>

<p>Now you can just follow the <a href="https://wiki.ubuntu.com/TrustyTahr/ReleaseNotes#Upgrading_from_Ubuntu_12.04_LTS_or_Ubuntu_13.10">upgrade instructions</a> and
almost nothing will be downloaded during the upgrade, because everything is already on your hard drive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-get update: fixing 'package index files are corrupted']]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2013/03/06/apt-get-update-fixing-package-index-files-are-corrupted/"/>
    <updated>2013-03-06T13:34:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2013/03/06/apt-get-update-fixing-package-index-files-are-corrupted</id>
    <content type="html"><![CDATA[<p>Sometimes when performing your daily <code>apt-get update</code>, you&rsquo;ll experience messages like</p>

<blockquote>
E: The package lists or status file could not be parsed or opened.
</blockquote>


<p>or</p>

<blockquote>
The package index files are corrupted
</blockquote>


<p>Such messages usually don&rsquo;t go away for quite a long time, and may prevent legitimate updates from installing.</p>

<p>This usually happens even more frequently if using a proxy to access apt archives.</p>

<p>While I don&rsquo;t know what&rsquo;s the root problem, I&rsquo;ve got a quick workaround that seems to fix the immediate error:</p>

<pre>
sudo -s -H bash -c 'apt-get clean && rm -f /var/lib/apt/lists/* ; rm -f /var/lib/apt/lists/partial/* && apt-get clean && apt-get update'
</pre>

]]></content>
  </entry>
  
</feed>
