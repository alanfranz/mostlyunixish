<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tomcat | Mostly Unixish]]></title>
  <link href="http://mostlyunixish.franzoni.eu/blog/categories/tomcat/atom.xml" rel="self"/>
  <link href="http://mostlyunixish.franzoni.eu/"/>
  <updated>2014-12-12T08:54:36+01:00</updated>
  <id>http://mostlyunixish.franzoni.eu/</id>
  <author>
    <name><![CDATA[Alan Franzoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep your tomcat instance up-to-date, and keep apps and configuration tidy.]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/09/03/keep-your-tomcat-instance-up-to-date-and-separate-configuration/"/>
    <updated>2014-09-03T19:52:00+02:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/09/03/keep-your-tomcat-instance-up-to-date-and-separate-configuration</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m gonna share something that I figured out some times ago: how do I keep
my <a href="http://tomcat.apache.org">tomcat</a> installation up to date on my servers?</p>

<p>Of course I&rsquo;m not willing to automatically switch majors, but I&rsquo;d like to pull bugfix
releases in as soon as possible; most of my servers should work unattended, and I prefer
to handle it if something crashes rather than being hacked because of some public exploit.</p>

<p>Apache Tomcat makes it incredibly hard to do so for different reasons: first, there&rsquo;s no <em>latest</em>
link for the latest release, you must first check the homepage to see what&rsquo;s the latest version;
second, the archive you can download mingles the application itself with the configuration, log
and webapp dir.</p>

<p>What should we do, then?</p>

<p>Tomcat allows us to configure almost everything. Let&rsquo;s use its power!</p>

<p>For this setup, I use Tomcat7 and I chose to employ <em>/etc/tomcat7/conf</em> as a configuration directory, <em>/opt/tomcat7/latest</em> as tomcat7 own directory, <em>/opt/tomcat7/webapps</em> for our webapps, <em>/opt/tomcat7/logs</em>,
<em>/opt/tomcat7/temp</em>, <em>/opt/tomcat7/work</em> as logging, temp and work directory, respectively.</p>

<p>To begin with, create a user (maybe a service user, I&rsquo;ll leave the details to you) <em>tomcat</em> with a main group <em>tomcat</em> as well, which we&rsquo;ll use to run the servlet container.</p>

<p>Now make sure your <a href="http://puppetlabs.com/">Puppet</a> manifest includes the tomcat7 class. In order to do so, you&rsquo;ll need this custom fact that helps the system determine the very latest tomcat7 version,
place it in your custom facts directory:</p>

<p>``` python find_apache_tomcat7_latest.py</p>

<h1>!/usr/bin/env python</h1>

<h1>add as fact, drop this into /etc/facter/facts.d/</h1>

<h1>requires python with lxml installed,(usually a python-lxml package is available in most distributions)</h1>

<p>from lxml.etree import HTML
import re
import sys
import urllib</p>

<p>pattern = re.compile(&ldquo;^7.0.\d\d\d?$&rdquo;)</p>

<p>root = HTML(urllib.urlopen(&ldquo;<a href="http://tomcat.apache.org/download-70.cgi">http://tomcat.apache.org/download-70.cgi</a>&rdquo;).read())</p>

<p>for e in root.iterdescendants():</p>

<pre><code>if isinstance(e.text, basestring) and pattern.match(e.text.strip()):
    print "tomcat7_latest_version={0}".format(e.text.strip())
    break
</code></pre>

<p>```</p>

<p>and the tomcat7 class, of course:</p>

<p>``` puppet tomcat7.pp</p>

<h1>this will install latest tomcat7 from apache website, and yet retain your</h1>

<h1>config from /etc/tomcat7/conf</h1>

<h1>tested with puppet 3.6</h1>

<p>class tomcat7 {</p>

<pre><code>$tomcat_full_version = $tomcat7_latest_version

exec { "/bin/tar xvf apache-tomcat-archive.tar.gz":
    creates =&gt;"/opt/tomcat7/apache-tomcat7-${tomcat_full_version}",
    cwd =&gt; "/opt/tomcat7",
    refreshonly =&gt; true,
    alias =&gt; "tomcat7_unpack",
    require =&gt; File["/opt/tomcat"]
}

file { "/opt/tomcat":
    ensure =&gt; "directory",
    mode =&gt; 0755,
    owner =&gt; "root",
    group =&gt; "root"
}


file { "/opt/tomcat7/apache-tomcat-archive.tar.gz":
    ensure =&gt; "present",
    source =&gt; "/tmp/apache-tomcat-${tomcat_full_version}.tar.gz",
    require =&gt; Exec["tomcat7_download_latest"],
    notify =&gt; Exec["tomcat7_unpack"]
    }

exec { "/usr/bin/wget --timestamping http://www.eu.apache.org/dist/tomcat/tomcat-7/v${tomcat_full_version}/bin/apache-tomcat-${tomcat_full_version}.tar.gz":
    alias =&gt; "tomcat7_download_latest",
    cwd =&gt; "/tmp"
}

exec { "/bin/ln -sf --no-target-directory apache-tomcat-${tomcat_full_version} latest":
    refreshonly =&gt; true,
    subscribe =&gt; Exec["tomcat7_unpack"],
    cwd =&gt; "/opt/tomcat7",
    alias =&gt; "tomcat7_symlink"
}



exec { "/bin/rm -rf conf.orig &amp;&amp; /bin/mv -f conf conf.orig &amp;&amp; /bin/ln -sf --no-target-directory /etc/tomcat7/conf conf":
    refreshonly =&gt; true,
    cwd =&gt; "/opt/tomcat7/latest",
    subscribe =&gt; Exec["tomcat7_symlink"],
    # notify =&gt; Service["tomcat7"],
    alias =&gt; "tomcat7_config_move"
}

# first-time only executions. I might like to abstract some logic if I were a bit less lazy than I am.
# in order to stay on the safe side, we never let the normal user to access our files; this may be relaxed,
# depending on your context.

# this contains our config. our servlet container should be able to read it, but never write it.
exec { "/bin/mkdir -p /etc/tomcat7 &amp;&amp; /bin/cp -r /opt/tomcat7/latest/conf.orig /etc/tomcat7/conf &amp;&amp; /bin/chmod 0750 /etc/tomcat7/conf &amp;&amp; /bin/chown root:tomcat /etc/tomcat7/conf ":
    creates =&gt; "/etc/tomcat7/conf",
    subscribe =&gt; Exec["tomcat7_config_move"]
}

# this will contain the actual code of our webapps. Again, the container must be able to read them, 
# never write to them.
exec { "/bin/mkdir -p -m 0750 /opt/tomcat7/webapps &amp;&amp; /bin/chown root:tomcat /opt/tomcat7/webapps":
    creates =&gt; "/etc/tomcat7/webapps",
}

# those are working directories where the container must be able to write.
exec { "/bin/mkdir -p -m 0770 /opt/tomcat7/work &amp;&amp; /bin/chown root:tomcat /opt/tomcat7/work":
    creates =&gt; "/etc/tomcat7/work",
}

exec { "/bin/mkdir -p -m 0770 /opt/tomcat7/temp &amp;&amp; /bin/chown root:tomcat /opt/tomcat7/temp":
    creates =&gt; "/etc/tomcat7/temp",
}

exec { "/bin/mkdir -p -m 0770 /opt/tomcat7/logs &amp;&amp; /bin/chown root:tomcat /opt/tomcat7/logs":
    creates =&gt; "/etc/tomcat7/logs",
}
</code></pre>

<p>}
```</p>

<p>The tomcat7 service is trivial and omitted, fill it in by yourself (or delete it).</p>

<p>Once this is done, you&rsquo;ll find a base configuration in <em>/etc/tomcat7/conf</em>. We must now edit <em>server.xml</em> there and tell Tomcat where we&rsquo;d like to have our webapps, logs and work directories:</p>

<p>```xml server.xml</p>

<!-- this should go inside <Server><Service><Engine> -->


<p>&lt;Host name=&ldquo;localhost&rdquo;  appBase=&ldquo;/opt/tomcat7/webapps&rdquo;</p>

<pre><code>        unpackWARs="false" autoDeploy="true" workDir="/opt/tomcat7/work"&gt;

    &lt;!-- SingleSignOn valve, share authentication between web applications
         Documentation at: /docs/config/valve.html --&gt;
    &lt;!--
    &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;
    --&gt;

    &lt;!-- Access log processes all example.
         Documentation at: /docs/config/valve.html
         Note: The pattern used is equivalent to using pattern="common" --&gt;
    &lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="/opt/tomcat7/logs"
           prefix="localhost_access_log." suffix=".txt"
           pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b" /&gt;

  &lt;/Host&gt;
</code></pre>

<p>```</p>

<p>Last but not least, we should tell tomcat what is <em>CATALINA_HOME</em> and <em>CATALINA_TMPDIR</em>. This is an example script that can be used with upstart on Ubuntu 12.04, change it according to your OS:</p>

<p>``` text tomcat7.conf
description &ldquo;tomcat7&rdquo;</p>

<p>  start on runlevel [2345]
  stop on runlevel [!2345]
  respawn
  respawn limit 10 5</p>

<p>  # run as non privileged user
  # add user with this command:
  ## adduser &mdash;system &mdash;ingroup www-data &mdash;home /opt/apache-tomcat apache-tomcat
  # Ubuntu 12.04: (use &lsquo;exec sudo -u apache-tomcat&rsquo; when using 10.04)
  setuid tomcat
  setgid tomcat</p>

<p>  # adapt paths:
  env JAVA_HOME=/usr/lib/jvm/java-7-oracle
  env CATALINA_HOME=/opt/tomcat7/latest
  env CATALINA_TMPDIR=/opt/tomcat7/temp
  env HOME=/home/tomcat</p>

<p>  # adapt java options to suit your needs:
  env JAVA_OPTS=&ldquo;-Djava.awt.headless=true&rdquo;
  env CATALINA_OPTS=&ldquo;-Xmx1536M -server&rdquo;</p>

<p>  exec $CATALINA_HOME/bin/catalina.sh run</p>

<p>  # cleanup temp directory after stop
  post-stop script</p>

<pre><code>rm -rf /opt/tomcat7/temp/*
</code></pre>

<p>  end script
```</p>

<p>In this situation I had a &ldquo;normal home&rdquo; for tomcat because I needed it, but your requirements
may work differently.</p>

<p>I hope that&rsquo;s useful to somebody.</p>
]]></content>
  </entry>
  
</feed>
