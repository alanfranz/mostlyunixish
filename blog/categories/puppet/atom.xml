<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puppet | Mostly Unixish]]></title>
  <link href="http://mostlyunixish.franzoni.eu/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://mostlyunixish.franzoni.eu/"/>
  <updated>2015-01-27T09:15:24+01:00</updated>
  <id>http://mostlyunixish.franzoni.eu/</id>
  <author>
    <name><![CDATA[Alan Franzoni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep your tomcat instance up-to-date, and keep apps and configuration tidy.]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2014/09/03/keep-your-tomcat-instance-up-to-date-and-separate-configuration/"/>
    <updated>2014-09-03T19:52:00+02:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2014/09/03/keep-your-tomcat-instance-up-to-date-and-separate-configuration</id>
    <content type="html"><![CDATA[<p><strong>UPDATED:</strong> 26th January 2015, with Tomcat 8 support.</p>

<p>Today I&rsquo;m gonna share something that I figured out some times ago: how do I keep
my <a href="http://tomcat.apache.org">tomcat</a> installation up to date on my servers?</p>

<p>Of course I&rsquo;m not willing to automatically switch majors, but I&rsquo;d like to pull bugfix
releases in as soon as possible; most of my servers should work unattended, and I prefer
to handle it if something crashes rather than being hacked because of some public exploit.</p>

<p>Apache Tomcat makes it incredibly hard to do so for different reasons: first, there&rsquo;s no <em>latest</em>
link for the latest release, you must first check the homepage to see what&rsquo;s the latest version;
second, the archive you can download mingles the application itself with the configuration, log
and webapp dir.</p>

<p>What should we do, then?</p>

<p>Tomcat allows us to configure almost everything. Let&rsquo;s use its power!</p>

<p>For this setup, I use Tomcat7 and I chose to employ <em>/etc/tomcat7/conf</em> as a configuration directory, <em>/opt/tomcat7/latest</em> as tomcat7 own directory, <em>/opt/tomcat7/webapps</em> for our webapps, <em>/opt/tomcat7/logs</em>,
<em>/opt/tomcat7/temp</em>, <em>/opt/tomcat7/work</em> as logging, temp and work directory, respectively.</p>

<p>The same applies for tomcat8, it&rsquo;s just the prefix that will change.</p>

<p>To begin with, create a user (maybe a service user, I&rsquo;ll leave the details to you) <em>tomcat</em> with a main group <em>tomcat</em> as well, which we&rsquo;ll use to run the servlet container &ndash; you can pick a different user if you like, the class allows you to choose.</p>

<p>Now make sure your <a href="http://puppetlabs.com/">Puppet</a> manifest includes the <strong>tomcat_versioned</strong> class with the proper parameters. In order to do so, you&rsquo;ll need this custom fact that helps the system determine the very latest tomcat7 version,
place it in your custom facts directory:</p>

<p>``` python find_apache_tomcat_latest_versions.py</p>

<h1>!/usr/bin/env python</h1>

<h1>requires lxml</h1>

<p>from lxml.etree import HTML
import re
import sys
import urllib</p>

<p>for version in (7,8):</p>

<pre><code>pattern = re.compile("^{0}\.0\.\d\d\d?$".format(version))
root = HTML(urllib.urlopen("http://tomcat.apache.org/download-{0}0.cgi".format(version)).read())
for e in root.iterdescendants():
    if isinstance(e.text, basestring) and pattern.match(e.text.strip()):
    print "tomcat{1}_latest_version={0}".format(e.text.strip(), version)
    break
</code></pre>

<p>```</p>

<p>and the tomcat_versioned class, of course; just pass the major of the tomcat you&rsquo;d like to use, and it will find the latest tomcat update for such major, and install it in <em>/opt/tomcatX</em>:</p>

<p>``` puppet tomcat_versioned.pp</p>

<h1>this will install latest tomcat from apache website, and yet retain your</h1>

<h1>config from /etc/tomcat7/conf</h1>

<h1>tested with puppet 3.7 and tomcat 7 and 8.</h1>

<p>class tomcat_versioned($tomcat_major=8, $tomcat_user=&ldquo;tomcat&rdquo;) {</p>

<pre><code># assumption: the user should exist, it won't be created
# you should define a tomcatX service outside this class
$tf = getvar("tomcat${tomcat_major}_latest_version")
$tm = "tomcat${tomcat_major}"

exec { "/bin/tar xvf apache-${tm}-archive.tar.gz":
creates =&gt;"/opt/${tm}/apache-${tm}-${tf}",
cwd =&gt; "/opt/${tm}",
refreshonly =&gt; true,
alias =&gt; "${tm}_unpack",
require =&gt; File["/opt/${tm}"]
</code></pre>

<p>}</p>

<p>file { &ldquo;/opt/${tm}&rdquo;:
ensure => &ldquo;directory&rdquo;,
mode => 0755,
owner => &ldquo;root&rdquo;,
group => &ldquo;root&rdquo;
}</p>

<p>file { &ldquo;/opt/${tm}/apache-${tm}-archive.tar.gz&rdquo;:
ensure => &ldquo;present&rdquo;,
source => &ldquo;/tmp/apache-tomcat-${tf}.tar.gz&rdquo;,
require => Exec[&ldquo;${tm}<em>download_latest&rdquo;],
notify => Exec[&ldquo;${tm}</em>unpack&rdquo;]
}</p>

<p>exec { &ldquo;/usr/bin/wget &mdash;timestamping <a href="http://www.eu.apache.org/dist/tomcat/tomcat-$">http://www.eu.apache.org/dist/tomcat/tomcat-$</a>{tomcat_major}/v${tf}/bin/apache-tomcat-${tf}.tar.gz&rdquo;:
alias => &ldquo;${tm}_download_latest&rdquo;,
cwd => &ldquo;/tmp&rdquo;
}</p>

<p>exec { &ldquo;/bin/ln -sf &mdash;no-target-directory apache-tomcat-${tf} latest&rdquo;:
refreshonly => true,
subscribe => Exec[&ldquo;${tm}<em>unpack&rdquo;],
cwd => &ldquo;/opt/${tm}&rdquo;,
alias => &ldquo;${tm}</em>symlink&rdquo;
}</p>

<p>exec { &ldquo;/bin/rm -rf conf.orig &amp;&amp; /bin/mv -f conf conf.orig &amp;&amp; /bin/ln -sf &mdash;no-target-directory /etc/${tm}/conf conf&rdquo;:
refreshonly => true,
cwd => &ldquo;/opt/${tm}/latest&rdquo;,
subscribe => Exec[&ldquo;${tm}<em>symlink&rdquo;],
notify => Service[&ldquo;${tm}&rdquo;],
alias => &ldquo;${tm}</em>config_move&rdquo;
}</p>

<h1>first-time only executions. I might like to abstract some logic if I were a bit less lazy than I am.</h1>

<h1>in order to stay on the safe side, we never let the normal user to access our files; this may be relaxed,</h1>

<h1>depending on your context.</h1>

<h1>this contains our config. our servlet container should be able to read it, but never write it.</h1>

<p>exec { &ldquo;/bin/mkdir -p /etc/${tm} &amp;&amp; /bin/cp -r /opt/${tm}/latest/conf.orig /etc/${tm}/conf &amp;&amp; /bin/chmod 0750 /etc/${tm}/conf &amp;&amp; /bin/chown -R root:${tomcat_user} /etc/${tm}/conf &amp;&amp; /bin/chmod 0640 /etc/${tm}/conf/*&rdquo;:
creates => &ldquo;/etc/${tm}/conf&rdquo;,
subscribe => Exec[&ldquo;${tm}_config_move&rdquo;]
}</p>

<h1>this will contain the actual code of our webapps. Again, the container must be able to read them,</h1>

<h1>never write to them.</h1>

<p>exec { &ldquo;/bin/mkdir -p -m 0750 /opt/${tm}/webapps &amp;&amp; /bin/chown root:${tomcat_user} /opt/${tm}/webapps&rdquo;:
creates => &ldquo;/opt/${tm}/webapps&rdquo;,
}</p>

<h1>those are working directories where the container must be able to write.</h1>

<p>exec { &ldquo;/bin/mkdir -p -m 0770 /opt/${tm}/work &amp;&amp; /bin/chown root:${tomcat_user} /opt/${tm}/work&rdquo;:
creates => &ldquo;/opt/${tm}/work&rdquo;,
}</p>

<p>exec { &ldquo;/bin/mkdir -p -m 0770 /opt/${tm}/temp &amp;&amp; /bin/chown root:${tomcat_user} /opt/${tm}/temp&rdquo;:
creates => &ldquo;/opt/${tm}/temp&rdquo;,
}</p>

<p>exec { &ldquo;/bin/mkdir -p -m 0770 /opt/${tm}/logs &amp;&amp; /bin/chown root:${tomcat_user} /opt/${tm}/logs&rdquo;:
creates => &ldquo;/opt/${tm}/logs&rdquo;,
}
}
```</p>

<p>The tomcat7 service is trivial and omitted, fill it in by yourself (or delete it).</p>

<p>Once this is done, you&rsquo;ll find a base configuration in <em>/etc/tomcat7/conf</em>. We must now edit <em>server.xml</em> there and tell Tomcat where we&rsquo;d like to have our webapps, logs and work directories:</p>

<p>```xml server.xml</p>

<!-- this should go inside <Server><Service><Engine> -->


<p>&lt;Host name=&ldquo;localhost&rdquo;  appBase=&ldquo;/opt/tomcat7/webapps&rdquo;</p>

<pre><code>        unpackWARs="false" autoDeploy="true" workDir="/opt/tomcat7/work"&gt;

    &lt;!-- SingleSignOn valve, share authentication between web applications
         Documentation at: /docs/config/valve.html --&gt;
    &lt;!--
    &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;
    --&gt;

    &lt;!-- Access log processes all example.
         Documentation at: /docs/config/valve.html
         Note: The pattern used is equivalent to using pattern="common" --&gt;
    &lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="/opt/tomcat7/logs"
           prefix="localhost_access_log." suffix=".txt"
           pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b" /&gt;

  &lt;/Host&gt;
</code></pre>

<p>```</p>

<p>Last but not least, we should tell tomcat what is <em>CATALINA_HOME</em> and <em>CATALINA_TMPDIR</em>. This is an example script that can be used with upstart on Ubuntu 12.04, change it according to your OS:</p>

<p>``` text tomcat7.conf
description &ldquo;tomcat7&rdquo;</p>

<p>  start on runlevel [2345]
  stop on runlevel [!2345]
  respawn
  respawn limit 10 5</p>

<p>  # run as non privileged user
  # add user with this command:
  ## adduser &mdash;system &mdash;ingroup www-data &mdash;home /opt/apache-tomcat apache-tomcat
  # Ubuntu 12.04: (use &lsquo;exec sudo -u apache-tomcat&rsquo; when using 10.04)
  setuid tomcat
  setgid tomcat</p>

<p>  # adapt paths:
  env JAVA_HOME=/usr/lib/jvm/java-7-oracle
  env CATALINA_HOME=/opt/tomcat7/latest
  env CATALINA_TMPDIR=/opt/tomcat7/temp
  env HOME=/home/tomcat</p>

<p>  # adapt java options to suit your needs:
  env JAVA_OPTS=&ldquo;-Djava.awt.headless=true&rdquo;
  env CATALINA_OPTS=&ldquo;-Xmx1536M -server&rdquo;</p>

<p>  exec $CATALINA_HOME/bin/catalina.sh run</p>

<p>  # cleanup temp directory after stop
  post-stop script</p>

<pre><code>rm -rf /opt/tomcat7/temp/*
</code></pre>

<p>  end script
```</p>

<p>In this situation I had a &ldquo;normal home&rdquo; for tomcat because I needed it, but your requirements
may work differently.</p>

<p>I hope that&rsquo;s useful to somebody.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Http Source for files]]></title>
    <link href="http://mostlyunixish.franzoni.eu/blog/2013/11/12/puppet-http-source-for-files/"/>
    <updated>2013-11-12T13:59:00+01:00</updated>
    <id>http://mostlyunixish.franzoni.eu/blog/2013/11/12/puppet-http-source-for-files</id>
    <content type="html"><![CDATA[<p>Sometimes you would like to use an http URL as the source file for <a href="http://puppetlabs.com/">puppet</a>; while it&rsquo;s being discussed
<a href="http://projects.puppetlabs.com/issues/5783">since long</a>, no implementation has been created so far.</p>

<p>Of course it would be better to periodically download the file from its http source to the puppet master,
and then use puppet file server to send such file to our client; but that&rsquo;s impractical in some contexts, especially
if you&rsquo;re using your puppet in headless mode, i.e. without a master. In such situations you may <strong>really</strong> want to
source files from http, <strong>without</strong> redownloading them if they haven&rsquo;t changed.</p>

<p>I found a good way to do it is to use the excellent <a href="http://www.gnu.org/software/wget/">wget</a> command line tool.</p>

<p>This is an example of what I use to keep my installation of <a href="http://www.jenkins-ci.org">Jenkins</a> up to date:</p>

<p>```</p>

<p>class jenkins {</p>

<pre><code>exec { "/usr/bin/wget --timestamping http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war":
    alias =&gt; "jenkinslatest",
    cwd =&gt; "/tmp",
}

file { "/opt/tomcat7/latest/webapps/jenkins.war":
    ensure =&gt; present,
    source =&gt; "/tmp/jenkins.war",
    alias =&gt; "jenkinswar",
    require =&gt; Exec["jenkinslatest"] }
</code></pre>

<p>}</p>

<p>```</p>

<p>The <em>timestamping</em> flag will let wget check the remote server for file modification time; if file hasn&rsquo;t changed,
it won&rsquo;t be redownloaded.</p>

<p>Just choose a proper directory for temporary downloads (tmp is volatile and gets sometimes cleaned up at runtime as well),
make sure the server properly sets the Last-Modified header and remember to refresh your other resources when files change,
and you&rsquo;re done.</p>
]]></content>
  </entry>
  
</feed>
